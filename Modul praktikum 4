Nama : Muhammad Firman Ardianto
NIM : 5311421035
Modul Praktikum 4
Kode Awal:
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
/**
* Graph represented by an adjacency list.
*
* Reference: Introduction to Algorithms - CLRS.
*
* @author
* @since: 26/02/2011
*/
public class AdjacencyList
{
public enum NodeColour { WHITE, GRAY, BLACK }
public static class Node
{
int data;
int distance;
Node predecessor;
NodeColour colour;
public Node(int data)
{
 this.data = data;
 }

 public String toString()
 {
 return "(" + data + ",d=" + distance + ")";
 }
 }

 Map<Node, List<Node>> nodes;
 public AdjacencyList()
 {
 nodes = new HashMap<Node, List<Node>>();
 }

 public void addEdge(Node n1, Node n2)
 {
 if (nodes.containsKey(n1)) {
 nodes.get(n1).add(n2);
 } else {
 ArrayList<Node> list = new ArrayList<Node>();
 list.add(n2);
 nodes.put(n1, list);
 }
 }

 public void bfs(Node s)
 {
 Set<Node> keys = nodes.keySet();
 for (Node u : keys) {
 if (u != s) {
 u.colour = NodeColour.WHITE;
 u.distance = Integer.MAX_VALUE;
 u.predecessor = null;
 }
 }
 s.colour = NodeColour.GRAY;
 s.distance = 0;
 s.predecessor = null;
 Queue<Node> q = new ArrayDeque<Node>();
 q.add(s);
 while (!q.isEmpty()) {
 Node u = q.remove();
 List<Node> adj_u = nodes.get(u);
 if (adj_u != null) {
 for (Node v : adj_u) {
 if(v.colour == NodeColour.WHITE) {
 v.colour = NodeColour.GRAY;
 v.distance = u.distance + 1;
 v.predecessor = u;
 q.add(v);
 }
 }
 }
 u.colour = NodeColour.BLACK;
 System.out.print(u + " ");
 }
 }
 public static void main(String[] args)
 {
 AdjacencyList graph = new AdjacencyList();
 Node n1 = new Node(1);
 Node n2 = new Node(2);
 Node n3 = new Node(3);
 Node n4 = new Node(4);
 Node n5 = new Node(5);
 Node n6 = new Node(6);
 Node n7 = new Node(7);
 Node n8 = new Node(8);

 graph.addEdge(n1, n2);

 graph.addEdge(n2, n1);
 graph.addEdge(n2, n3);

 graph.addEdge(n3, n4);
 graph.addEdge(n3, n2);

 graph.addEdge(n4, n3);
 graph.addEdge(n4, n5);
 graph.addEdge(n4, n6);

 graph.addEdge(n5, n4);
 graph.addEdge(n5, n6);
 graph.addEdge(n5, n7);

 graph.addEdge(n6, n4);
 graph.addEdge(n6, n5);
 graph.addEdge(n6, n7);
 graph.addEdge(n6, n8);

 graph.addEdge(n7, n5);
 graph.addEdge(n7, n6);
 graph.addEdge(n7, n8);

 graph.addEdge(n8, n6);
 graph.addEdge(n8, n7);

 graph.bfs(n3);
 }
}
run:
(3,d=0) (4,d=1) (2,d=1) (5,d=2) (6,d=2) (1,d=2) (7,d=3) (8,d=3)
BUILD SUCCESSFUL (total time: 0 seconds)
Tugas:
1. Tentukan bagaimana algoritma BFS di atas dapat menentukan node ke 8, 6,
dan 7.
2. Ubahlah method static void main sehingga bentuk tree seperti Gambar 4.4
dapat dibentuk. Kemudian tentukan bagaimana algoritma BFS dapat
menemukan node 5.
3. Ubahlah method static void main sehingga bentuk tree seperti Gambar 4.5
dapat dibentuk. Kemudian tentukan bagaimana algoritma BFS dapat
menemukan node 9.
4. Ubahlah kode program di atas sehingga bentuk tree seperti Gambar 6 dapat
dibentuk. Kemudian tentukan bagaimana algoritma BFS dapat menemukan
node C.
Jawab:
1. Algoritma BFS dalam kode tersebut menentukan node 8, 6, dan 7 dengan
cara berikut:
• Node 8 terletak pada jarak 3 langkah dari node awal `n3` (d=3)
dengan node predecessor yaitu node 6, yang berarti algoritma BFS
menemukan jalur terpendek dari `n3` ke 8 melibatkan 3 edge dan
melibatkan node 6 dalam jalur tersebut.
• Node 6 terletak pada jarak 2 langkah dari node awal `n3` (d=2)
dengan node predecessor yaitu node 4, yang berarti algoritma BFS
menemukan jalur terpendek dari `n3` ke 6 melibatkan 2 edge dan
melibatkan node 4 dalam jalur tersebut.
• Node 7 terletak pada jarak 3 langkah dari node awal `n3` (d=3)
dengan node predecessor yaitu node 5, yang berarti algoritma BFS
menemukan jalur terpendek dari `n3` ke 7 melibatkan 3 edge dan
melibatkan node 5 dalam jalur tersebut.
2. Mengubah method static void main menjadi seperti berikut:
 public static void main(String[] args)
 {
 AdjacencyList graph = new AdjacencyList();
 Node n0 = new Node(0);
 Node n1 = new Node(1);
 Node n2 = new Node(2);
 Node n3 = new Node(3);
 Node n4 = new Node(4);
 Node n5 = new Node(5);
 Node n6 = new Node(6);
 graph.addEdge(n0, n1);
 graph.addEdge(n0, n2);

 graph.addEdge(n1, n3);
 graph.addEdge(n1, n4);

 graph.addEdge(n2, n5);
 graph.addEdge(n2, n6);

 graph.addEdge(n3, n1);

 graph.addEdge(n4, n1);

 graph.addEdge(n5, n2);

 graph.addEdge(n6, n2);

 graph.bfs(n0);
 }
}
Output: (0,d=0) (1,d=1) (2,d=1) (3,d=2) (4,d=2) (5,d=2) (6,d=2)
Algoritma BFS dalam kode yang telah diubah mencari node 5 dengan langkahlangkah berikut: Dimulai dari node sumber (node 0) dengan jarak awal 0, nodenode terdekat (node 1 dan node 2) diberi jarak 1 dan ditandai sebagai 'GRAY'.
Kemudian, node 1 dan 2 dimasukkan ke dalam antrian untuk diperiksa lebih lanjut.
Node 1 ditemukan memiliki tetangga node 3 dan 4, dan keduanya diberi jarak 2
dengan node 1 sebagai pendahulu. Node-node ini juga dimasukkan ke dalam
antrian. Sama halnya dengan node 2 yang memiliki tetangga node 5 dan 6, juga
diberi jarak 2. Semua node diproses hingga antrian kosong, dan node 5 ditemukan
selama pencarian dengan jarak terpendek dari node sumber ke node 5 adalah 2,
yang ditampilkan sebagai '(5, d=2)' dalam output.
3. Mengubah method static void main menjadi seperti berikut:
 public static void main(String[] args)
 {
 AdjacencyList graph = new AdjacencyList();
 Node n1 = new Node(1);
 Node n2 = new Node(2);
 Node n3 = new Node(3);
 Node n4 = new Node(4);
 Node n5 = new Node(5);
 Node n6 = new Node(6);
 Node n7 = new Node(7);
 Node n8 = new Node(8);
 Node n9 = new Node(9);
 Node n10 = new Node(10);
 Node n11 = new Node(11);
 Node n12 = new Node(12);
 graph.addEdge(n1, n2);
 graph.addEdge(n1, n3);
 graph.addEdge(n1, n4);

 graph.addEdge(n2, n5);
 graph.addEdge(n2, n6);
 graph.addEdge(n3, n1);

 graph.addEdge(n4, n7);
 graph.addEdge(n4, n8);

 graph.addEdge(n5, n2);
 graph.addEdge(n5, n9);
 graph.addEdge(n5, n10);

 graph.addEdge(n6, n2);

 graph.addEdge(n7, n4);
 graph.addEdge(n7, n11);
 graph.addEdge(n7, n12);

 graph.addEdge(n8, n4);

 graph.addEdge(n9, n5);

 graph.addEdge(n10, n5);

 graph.addEdge(n11, n7);

 graph.addEdge(n12, n7);


 graph.bfs(n1);
 }
}
Output: (1,d=0) (2,d=1) (3,d=1) (4,d=1) (5,d=2) (6,d=2) (7,d=2) (8,d=2)
(9,d=3) (10,d=3) (11,d=3) (12,d=3)
Algoritma BFS menemukan node 9 sebagai hasil dari langkah-langkah pencarian
yang dimulai dari node sumber (node 1), yang berfungsi sebagai akar pohon BFS.
Node 9 ditemukan setelah dua langkah atau dengan jarak `d=3` dari node sumber.
Proses dimulai dengan memeriksa node-node tetangga node 1 (node 2, 3, dan 4),
yang diberi jarak `d=1` dan ditandai sebagai 'GRAY'. Node-node ini kemudian
dimasukkan ke dalam antrian untuk pengolahan selanjutnya. Selama langkah
kedua, node pertama yang diambil dari antrian adalah node 2, yang memiliki
tetangga node 5 dan 6. Kedua node ini diberi jarak `d=2`, dan proses berlanjut.
Akhirnya, dalam langkah ketiga, node 9 ditemukan, dan jarak terpendeknya dari
node sumber (node 1) adalah 3, yang ditampilkan sebagai '(9, d=3)' dalam output.
4. Mengubah method static void main menjadi seperti berikut:
 public static void main(String[] args)
 {
 AdjacencyList graph = new AdjacencyList();
 Node n1 = new Node(1);
 Node n2 = new Node(2);
 Node n3 = new Node(3);
 Node n4 = new Node(4);
 Node n5 = new Node(5);
 Node n6 = new Node(6);
 Node n7 = new Node(7);
 Node n8 = new Node(8);
 Node n9 = new Node(9);

 graph.addEdge(n1, n2);
 graph.addEdge(n1, n6);

 graph.addEdge(n2, n1);
 graph.addEdge(n2, n4);

 graph.addEdge(n3, n4);
 graph.addEdge(n3, n5);

 graph.addEdge(n4, n3);
 graph.addEdge(n4, n5);

 graph.addEdge(n5, n4);

 graph.addEdge(n6, n2);
 graph.addEdge(n6, n7);

 graph.addEdge(n7, n9);

 graph.addEdge(n8, n9);

 graph.addEdge(n9, n8);

 graph.bfs(n6);
 }
}
Output: (6,d=0) (2,d=1) (7,d=1) (1,d=2) (4,d=2) (9,d=2) (3,d=3) (5,d=3)
(8,d=3)
Keterangan: A=1, B=2, C=3, D=5, E=5. F=6, G=7, H=8, I=9
Algoritma BFS menemukan node 3 setelah tiga langkah pencarian yang dimulai
dari node sumber (node 6) sebagai akar pohon BFS. Node 3 diberi jarak d=3 dari
node sumber. Proses dimulai dengan node 6, kemudian menjelajahi node-node
tetangga (2 dan 7) dalam langkah pertama dan memberikan jarak d=1. Selanjutnya,
node-node terkait (1, 4, 9, dan 6) diberi jarak d=2 dalam langkah kedua. Akhirnya,
dalam langkah ketiga, node 3 ditemukan, dan jarak terpendeknya dari node sumber
(node 6) adalah 3, ditampilkan sebagai '(3, d=3)' dalam output.
